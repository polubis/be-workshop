-- URL Shortener Migration
-- Creates the main table for storing URL mappings

create table public.urls (
  id bigint generated by default as identity primary key,
  creation_date timestamptz default now() not null,
  update_date timestamptz default now() not null,
  long_url text not null check (
    char_length(trim(long_url)) >= 1 and 
    char_length(trim(long_url)) <= 2048 and
    (trim(long_url) like 'http://%' or trim(long_url) like 'https://%')
  ),
  short_code text not null check (
    char_length(trim(short_code)) >= 8 and
    trim(short_code) ~ '^[a-z0-9]+$'
  ),
  constraint unique_short_code unique (short_code)
);

comment on table public.urls is 'URL mappings for the URL shortener service.';
comment on column public.urls.long_url is 'Original URL to be shortened. Must be valid HTTP/HTTPS URL with max 2048 characters.';
comment on column public.urls.short_code is 'Unique short identifier. Min 8 characters, lowercase letters and numbers only.';

-- Trigger function to update the update_date timestamp
create or replace function public.handle_updated_at()
returns trigger as $$
begin
  new.update_date = now();
  return new;
end;
$$ language plpgsql set search_path = '';

-- Trigger to automatically update the update_date column
create trigger on_url_update
before update on public.urls
for each row
execute procedure public.handle_updated_at();
